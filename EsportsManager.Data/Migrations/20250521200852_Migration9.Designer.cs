// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EsportsManager.Data.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250521200852_Migration9")]
    partial class Migration9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Adaptability")
                        .HasColumnType("REAL");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Buyout")
                        .HasColumnType("REAL");

                    b.Property<double>("Communication")
                        .HasColumnType("REAL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("GameSense")
                        .HasColumnType("REAL");

                    b.Property<Guid>("GameStateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Happiness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Mentorship")
                        .HasColumnType("REAL");

                    b.Property<double>("Money")
                        .HasColumnType("REAL");

                    b.Property<int>("Motivation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Prestiege")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Strategy")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<double>("WeeklySalary")
                        .HasColumnType("REAL");

                    b.Property<bool>("isAlive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isMale")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.HasIndex("TeamId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.GameProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("GameProfiles");

                    b.HasDiscriminator<string>("ProfileType").HasValue("GameProfile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.GameState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Budget")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("PlayedYears")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserTeamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserTeamId1")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeeklyExpense")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserTeamId1");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameStateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Happiness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Money")
                        .HasColumnType("REAL");

                    b.Property<int>("Motivation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeeklySalary")
                        .HasColumnType("REAL");

                    b.Property<bool>("isAlive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isMale")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameStateId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WinnerTeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("Matches");

                    b.HasDiscriminator<string>("MatchType").HasValue("Match");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Budget")
                        .HasColumnType("REAL");

                    b.Property<int>("FoundingYear")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GameStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("HQ_City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HQ_Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Prestige")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeeklyExpense")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Buyout")
                        .HasColumnType("REAL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameStateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Happiness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Money")
                        .HasColumnType("REAL");

                    b.Property<int>("Motivation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Prestiege")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<double>("WeeklySalary")
                        .HasColumnType("REAL");

                    b.Property<bool>("isAlive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isMale")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.PlayerStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerStats");

                    b.HasDiscriminator().HasValue("PlayerStats");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeamAId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamAWins")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeamBId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamBWins")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Budget")
                        .HasColumnType("REAL");

                    b.Property<int>("DivisionalLevel")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GameId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("HQ_City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HQ_Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Prestige")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("WeeklyExpense")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameId1");

                    b.HasIndex("GameStateId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PrizePool")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartingWeek")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameStateId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.Property<Guid>("ParticipatingTeamsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TournamentsParticipatedId")
                        .HasColumnType("TEXT");

                    b.HasKey("ParticipatingTeamsId", "TournamentsParticipatedId");

                    b.HasIndex("TournamentsParticipatedId");

                    b.ToTable("TeamTournament");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.GameProfile_CS", b =>
                {
                    b.HasBaseType("EsportsManager.EsportsManager.Data.Models.GameProfile");

                    b.Property<double>("Adaptability")
                        .HasColumnType("REAL");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Communication")
                        .HasColumnType("REAL");

                    b.Property<double>("Consistency")
                        .HasColumnType("REAL");

                    b.Property<int>("DamageDealt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GameSense")
                        .HasColumnType("REAL");

                    b.Property<int>("HeadShotKills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mechanics")
                        .HasColumnType("REAL");

                    b.Property<double>("Potential")
                        .HasColumnType("REAL");

                    b.Property<double>("Reflexes")
                        .HasColumnType("REAL");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsSurvived")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsTraded")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsWithKillsOrAssists")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tactics")
                        .HasColumnType("REAL");

                    b.Property<double>("Teamwork")
                        .HasColumnType("REAL");

                    b.Property<bool>("isBenched")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("CS");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.GameProfile_LoL", b =>
                {
                    b.HasBaseType("EsportsManager.EsportsManager.Data.Models.GameProfile");

                    b.Property<double>("Adaptability")
                        .HasColumnType("REAL");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CS")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Communication")
                        .HasColumnType("REAL");

                    b.Property<double>("Consistency")
                        .HasColumnType("REAL");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GameSense")
                        .HasColumnType("REAL");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mechanics")
                        .HasColumnType("REAL");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectivesTaken")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Potential")
                        .HasColumnType("REAL");

                    b.Property<double>("Reflexes")
                        .HasColumnType("REAL");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tactics")
                        .HasColumnType("REAL");

                    b.Property<double>("Teamwork")
                        .HasColumnType("REAL");

                    b.Property<int>("WardsCleared")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WardsPlaced")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isBenched")
                        .HasColumnType("INTEGER");

                    b.ToTable("GameProfiles", t =>
                        {
                            t.Property("Adaptability")
                                .HasColumnName("GameProfile_LoL_Adaptability");

                            t.Property("Assists")
                                .HasColumnName("GameProfile_LoL_Assists");

                            t.Property("Communication")
                                .HasColumnName("GameProfile_LoL_Communication");

                            t.Property("Consistency")
                                .HasColumnName("GameProfile_LoL_Consistency");

                            t.Property("Deaths")
                                .HasColumnName("GameProfile_LoL_Deaths");

                            t.Property("GameSense")
                                .HasColumnName("GameProfile_LoL_GameSense");

                            t.Property("Kills")
                                .HasColumnName("GameProfile_LoL_Kills");

                            t.Property("Mechanics")
                                .HasColumnName("GameProfile_LoL_Mechanics");

                            t.Property("Potential")
                                .HasColumnName("GameProfile_LoL_Potential");

                            t.Property("Reflexes")
                                .HasColumnName("GameProfile_LoL_Reflexes");

                            t.Property("Role")
                                .HasColumnName("GameProfile_LoL_Role");

                            t.Property("Tactics")
                                .HasColumnName("GameProfile_LoL_Tactics");

                            t.Property("Teamwork")
                                .HasColumnName("GameProfile_LoL_Teamwork");

                            t.Property("isBenched")
                                .HasColumnName("GameProfile_LoL_isBenched");
                        });

                    b.HasDiscriminator().HasValue("LoL");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.GameProfile_SC", b =>
                {
                    b.HasBaseType("EsportsManager.EsportsManager.Data.Models.GameProfile");

                    b.Property<int>("APM")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Adaptability")
                        .HasColumnType("REAL");

                    b.Property<double>("GameSense")
                        .HasColumnType("REAL");

                    b.Property<double>("Macro")
                        .HasColumnType("REAL");

                    b.Property<int>("MapsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mechanics")
                        .HasColumnType("REAL");

                    b.Property<double>("Micro")
                        .HasColumnType("REAL");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tactics")
                        .HasColumnType("REAL");

                    b.Property<bool>("isBenched")
                        .HasColumnType("INTEGER");

                    b.ToTable("GameProfiles", t =>
                        {
                            t.Property("Adaptability")
                                .HasColumnName("GameProfile_SC_Adaptability");

                            t.Property("GameSense")
                                .HasColumnName("GameProfile_SC_GameSense");

                            t.Property("MapsPlayed")
                                .HasColumnName("GameProfile_SC_MapsPlayed");

                            t.Property("Mechanics")
                                .HasColumnName("GameProfile_SC_Mechanics");

                            t.Property("Role")
                                .HasColumnName("GameProfile_SC_Role");

                            t.Property("Tactics")
                                .HasColumnName("GameProfile_SC_Tactics");

                            t.Property("isBenched")
                                .HasColumnName("GameProfile_SC_isBenched");
                        });

                    b.HasDiscriminator().HasValue("SC");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Match_CS", b =>
                {
                    b.HasBaseType("EsportsManager.EsportsManager.Data.Models.Match");

                    b.Property<Guid>("MapId")
                        .HasColumnType("TEXT");

                    b.HasIndex("MapId");

                    b.HasDiscriminator().HasValue("CS");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Match_LoL", b =>
                {
                    b.HasBaseType("EsportsManager.EsportsManager.Data.Models.Match");

                    b.Property<int>("AssistsTeamA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssistsTeamB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaronsSlayedTeamA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaronsSlayedTeamB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeathsTeamA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeathsTeamB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DragonsSlayedTeamA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DragonsSlayedTeamB")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<int>("KillsTeamA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KillsTeamB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TowersDestroyedTeamA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TowersDestroyedTeamB")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("LoL");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.PlayerStats_CS", b =>
                {
                    b.HasBaseType("EsportsManager.EsportsManager.Data.Models.PlayerStats");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DamageDealt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadShotKills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsSurvived")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsTraded")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsWithKillsOrAssists")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasDiscriminator().HasValue("PlayerStats_CS");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Coach", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.GameState", "GameState")
                        .WithMany("Coaches")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameState");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Game", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.GameState", "GameState")
                        .WithMany("AllGames")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameState");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.GameProfile", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Game", "Game")
                        .WithMany("GameProfiles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Player", "Player")
                        .WithMany("GameProfiles")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.GameState", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "UserTeam")
                        .WithMany()
                        .HasForeignKey("UserTeamId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTeam");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Manager", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.GameState", "GameState")
                        .WithMany("Managers")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Organization", "Organization")
                        .WithMany("Managers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameState");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Map", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.GameState", "GameState")
                        .WithMany("Maps")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameState");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Match", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Series", "Series")
                        .WithMany("Matches")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Organization", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.GameState", "GameState")
                        .WithMany("Organizations")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameState");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Player", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.GameState", "GameState")
                        .WithMany("Players")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameState");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.PlayerStats", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Series", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "TeamA")
                        .WithMany()
                        .HasForeignKey("TeamAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "TeamB")
                        .WithMany()
                        .HasForeignKey("TeamBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Tournament", "Tournament")
                        .WithMany("Series")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Team", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Game", null)
                        .WithMany("Teams")
                        .HasForeignKey("GameId1");

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.GameState", "GameState")
                        .WithMany("Teams")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Organization", "Organization")
                        .WithMany("Teams")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("GameState");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Tournament", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.GameState", "GameState")
                        .WithMany("AllTournaments")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Organization", "Organization")
                        .WithMany("Tournaments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", "Winner")
                        .WithMany("TournamentsWon")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("GameState");

                    b.Navigation("Organization");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsParticipatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Match_CS", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Map", "Map")
                        .WithMany("Matches")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.PlayerStats_CS", b =>
                {
                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Match_CS", "Match")
                        .WithMany("PlayerStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.EsportsManager.Data.Models.Player", "Player")
                        .WithMany("PlayerStats_CS")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Game", b =>
                {
                    b.Navigation("GameProfiles");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.GameState", b =>
                {
                    b.Navigation("AllGames");

                    b.Navigation("AllTournaments");

                    b.Navigation("Coaches");

                    b.Navigation("Managers");

                    b.Navigation("Maps");

                    b.Navigation("Organizations");

                    b.Navigation("Players");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Map", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Organization", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("Teams");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Player", b =>
                {
                    b.Navigation("GameProfiles");

                    b.Navigation("PlayerStats_CS");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Series", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Team", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Players");

                    b.Navigation("TournamentsWon");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Tournament", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("EsportsManager.EsportsManager.Data.Models.Match_CS", b =>
                {
                    b.Navigation("PlayerStats");
                });
#pragma warning restore 612, 618
        }
    }
}
