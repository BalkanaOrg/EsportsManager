// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EsportsManager.Data.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250519165624_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Adaptability")
                        .HasColumnType("REAL");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Communication")
                        .HasColumnType("REAL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("GameSense")
                        .HasColumnType("REAL");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Mentorship")
                        .HasColumnType("REAL");

                    b.Property<int>("Motivation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Prestiege")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Strategy")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.GameProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("GameProfiles");

                    b.HasDiscriminator<string>("ProfileType").HasValue("GameProfile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Motivation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Prestiege")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Budget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DivisionalLevel")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Prestige")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeeklyExpense")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.GameProfile_CS", b =>
                {
                    b.HasBaseType("EsportsManager.Scripts._DB.Models.GameProfile");

                    b.Property<double>("Adaptability")
                        .HasColumnType("REAL");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Communication")
                        .HasColumnType("REAL");

                    b.Property<int>("DamageDealt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GameSense")
                        .HasColumnType("REAL");

                    b.Property<int>("HeadShotKills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mechanics")
                        .HasColumnType("REAL");

                    b.Property<double>("Reflexes")
                        .HasColumnType("REAL");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsSurvived")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsTraded")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundsWithKillsOrAssists")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tactics")
                        .HasColumnType("REAL");

                    b.Property<double>("Teamwork")
                        .HasColumnType("REAL");

                    b.Property<bool>("isBenched")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("CS");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.GameProfile_LoL", b =>
                {
                    b.HasBaseType("EsportsManager.Scripts._DB.Models.GameProfile");

                    b.Property<double>("Adaptability")
                        .HasColumnType("REAL");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CS")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Communication")
                        .HasColumnType("REAL");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GameSense")
                        .HasColumnType("REAL");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mechanics")
                        .HasColumnType("REAL");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectivesTaken")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Reflexes")
                        .HasColumnType("REAL");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tactics")
                        .HasColumnType("REAL");

                    b.Property<double>("Teamwork")
                        .HasColumnType("REAL");

                    b.Property<int>("WardsCleared")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WardsPlaced")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isBenched")
                        .HasColumnType("INTEGER");

                    b.ToTable("GameProfiles", t =>
                        {
                            t.Property("Adaptability")
                                .HasColumnName("GameProfile_LoL_Adaptability");

                            t.Property("Assists")
                                .HasColumnName("GameProfile_LoL_Assists");

                            t.Property("Communication")
                                .HasColumnName("GameProfile_LoL_Communication");

                            t.Property("Deaths")
                                .HasColumnName("GameProfile_LoL_Deaths");

                            t.Property("GameSense")
                                .HasColumnName("GameProfile_LoL_GameSense");

                            t.Property("Kills")
                                .HasColumnName("GameProfile_LoL_Kills");

                            t.Property("Mechanics")
                                .HasColumnName("GameProfile_LoL_Mechanics");

                            t.Property("Reflexes")
                                .HasColumnName("GameProfile_LoL_Reflexes");

                            t.Property("Role")
                                .HasColumnName("GameProfile_LoL_Role");

                            t.Property("Tactics")
                                .HasColumnName("GameProfile_LoL_Tactics");

                            t.Property("Teamwork")
                                .HasColumnName("GameProfile_LoL_Teamwork");

                            t.Property("isBenched")
                                .HasColumnName("GameProfile_LoL_isBenched");
                        });

                    b.HasDiscriminator().HasValue("LoL");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.GameProfile_SC", b =>
                {
                    b.HasBaseType("EsportsManager.Scripts._DB.Models.GameProfile");

                    b.Property<int>("APM")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Adaptability")
                        .HasColumnType("REAL");

                    b.Property<double>("GameSense")
                        .HasColumnType("REAL");

                    b.Property<double>("Macro")
                        .HasColumnType("REAL");

                    b.Property<int>("MapsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mechanics")
                        .HasColumnType("REAL");

                    b.Property<double>("Micro")
                        .HasColumnType("REAL");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tactics")
                        .HasColumnType("REAL");

                    b.Property<bool>("isBenched")
                        .HasColumnType("INTEGER");

                    b.ToTable("GameProfiles", t =>
                        {
                            t.Property("Adaptability")
                                .HasColumnName("GameProfile_SC_Adaptability");

                            t.Property("GameSense")
                                .HasColumnName("GameProfile_SC_GameSense");

                            t.Property("MapsPlayed")
                                .HasColumnName("GameProfile_SC_MapsPlayed");

                            t.Property("Mechanics")
                                .HasColumnName("GameProfile_SC_Mechanics");

                            t.Property("Role")
                                .HasColumnName("GameProfile_SC_Role");

                            t.Property("Tactics")
                                .HasColumnName("GameProfile_SC_Tactics");

                            t.Property("isBenched")
                                .HasColumnName("GameProfile_SC_isBenched");
                        });

                    b.HasDiscriminator().HasValue("SC");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Coach", b =>
                {
                    b.HasOne("EsportsManager.Scripts._DB.Models.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.GameProfile", b =>
                {
                    b.HasOne("EsportsManager.Scripts._DB.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.Scripts._DB.Models.Player", "Player")
                        .WithMany("GameProfiles")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EsportsManager.Scripts._DB.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Player", b =>
                {
                    b.HasOne("EsportsManager.Scripts._DB.Models.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EsportsManager.Scripts._DB.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Team", b =>
                {
                    b.HasOne("EsportsManager.Scripts._DB.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Player", b =>
                {
                    b.Navigation("GameProfiles");
                });

            modelBuilder.Entity("EsportsManager.Scripts._DB.Models.Team", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
